
 Patents
15 of 3,53,082
Search Terms
Search Fields
Before priority
After filing
Mobile terminal apparatus and software install method
Abstract
A software-source monitoring unit monitors a software source that provides software required for using the peripheral device, and stores data pertaining to acquirable software and the software source in a corresponding manner in a memory unit. A peripheral-device monitoring unit monitors connection status of the peripheral device. A software-source selecting unit selects the software source based on the data stored in the memory unit when the peripheral-device monitoring unit detects the connection of the peripheral device. An install executing unit acquires the software from the software source selected by the software-source selecting unit.
Images (11)
Classifications
G06F8/61 Installation
US20070124459A1

US Application
Download PDF
Find Prior Art

Legal status
    Granted 
Application number
    US11360390
Other versions
    US7761883B2 (Grant) 

Inventor
    Koichiro Kasama 
Current Assignee
    Fujitsu Ltd 
Original Assignee
    Fujitsu Ltd 

Priority date
    2005-11-28 
Filing date
    2006-02-24 
Publication date
    2007-05-31

Info
    Patent citations (4)
    Cited by (42)
    Also published as (3)
    Legal events
    Similar documents
External links
    USPTO
    USPTO Assignment
    Espacenet
    Global Dossier
    Discuss

Description

    BACKGROUND OF THE INVENTION
    [0001]
    1. Field of the Invention
    [0002]
    The present invention relates to a technology for installing software in a mobile terminal apparatus to which a peripheral device can be connected.
    [0003]
    2. Description of the Related Art
    [0004]
    Recent advances in mobile phone telephony have given rise to multi-function mobile phone units that can, for instance, connect to the Internet, is equipped with camera functions, etc. The mobile phone units also come with audio-visual features and function as a television set, a radio set, etc. Though multi-functionality in a mobile phone unit is sought by users, the accompanying bulkiness and cost increase are deterring factors.
    [0005]
    Therefore, research is underway for providing functions like global position system (GPS) on a separate peripheral device so that the peripheral device may be connected to the mobile phone unit whenever the need for its function arises. Thus, the user has a compact mobile phone unit having the basic functions and can be offered various types of peripheral devices for various specific functions. Thus, the user is free to connect the peripheral devices useful to the user with the user's own mobile phone unit.
    [0006]
    However, to be able to control the peripheral device, the mobile phone unit must have installed on it software such as the drivers, application, etc. required for the peripheral device. For example, when a peripheral device having a GPS capability is connected to the mobile phone unit, the drivers or applications required for displaying map data, etc. must be installed on the mobile phone unit so that it can control the peripheral device.
    [0007]
    An average user may not have in in-depth knowledge about software and would avoid any complicated process when using the mobile phone unit. Therefore, from the user's viewpoint, it is preferable that the software installation takes place automatically. Software required for using the peripheral device is different for different models of mobile phone units. Also, several versions of the same software, developed for the sake of fixing bugs or for providing additional functions, are usually available. Therefore, selecting the appropriate software is not easy for an average user.
    [0008]
    Technology for automatic installation of software is well known where appropriate software is acquired via a network to expand the functionality of a personal computer by connecting the personal computer to a peripheral device (see, for example, Japanese Patent Application Laid-Open No. 2003-141011).
    [0009]
    However, connecting to the network from a mobile phone unit is very expensive and the communication speed is also comparatively slow. Therefore, the software install method used for personal computers cannot be applied for mobile phone units.
    [0010]
    A method of storing all the general software required for using all anticipated peripheral devices in the internal memory of the mobile phone unit can be contemplated. However, a large internal memory will be required to store all the software, thus pushing up the cost. Further, it would be difficult to control an unanticipated peripheral device for which the mobile phone unit does not already have the software, or the peripheral device whose software, though present in the internal memory, has bugs and needs fixing.
    [0011]
    The problem not only concerns mobile phone units but also mobile game terminals.
    SUMMARY OF THE INVENTION
    [0012]
    It is an object of the present invention to at least solve the problems in the conventional technology.
    [0013]
    A mobile terminal apparatus connectable to a peripheral device, according to one aspect of the present invention, includes a software-source monitoring unit that monitors a software source that provides software required for using the peripheral device, and stores data pertaining to acquirable software and the software source in a corresponding manner in a memory unit; a peripheral-device monitoring unit that monitors connection status of the peripheral device; a software-source selecting unit that selects the software source based on the data stored in the memory unit when the peripheral-device monitoring unit detects connection of the peripheral device; and an install executing unit that acquires the software from the software source selected by the software-source selecting unit.
    [0014]
    A method of installing software in a mobile terminal apparatus connectable to a peripheral device, according to another aspect of the present invention, includes software-source monitoring including monitoring a software source that provides software required for using the peripheral device, and storing data pertaining to acquirable software and the software source in a corresponding manner in a memory unit; monitoring connection status of the peripheral device; selecting the software source based on the data stored in the memory unit when connection of the peripheral device is detected; and acquiring the software from the software source selected at the selecting.
    [0015]
    A computer-readable recording medium according to still another aspect of the present invention stores a computer program for supporting an acquisition of software required for using a peripheral device connected to a mobile terminal apparatus. The computer program causes a computer to execute collecting data pertaining to software compatible with the mobile terminal apparatus based on model data of the mobile terminal apparatus registered in advance; acquiring the software based on the collected data; storing the acquire software in a memory unit; and sending the collected data and the stored software to the mobile terminal apparatus in response to a request from the mobile terminal apparatus.
    [0016]
    The above and other objects, features, advantages and technical and industrial significance of this invention will be better understood by reading the following detailed description of presently preferred embodiments of the invention, when considered in connection with the accompanying drawings.
    BRIEF DESCRIPTION OF THE DRAWINGS
    [0017]
    FIG. 1 is a schematic for explaining a software install method according to an embodiment of the present invention;
    [0018]
    FIG. 2 is a block diagram of a mobile terminal apparatus according to the present embodiment;
    [0019]
    FIG. 3 is a schematic of data organization of a software-source management table;
    [0020]
    FIG. 4 is a schematic of data organization of a version management table;
    [0021]
    FIG. 5 is a schematic of data organization of a peripheral-device management table;
    [0022]
    FIG. 6 is a block diagram of an external device;
    [0023]
    FIG. 7 is a flowchart of functioning of a software-source monitoring unit;
    [0024]
    FIG. 8 is a flowchart of a process procedure when a peripheral device is connected;
    [0025]
    FIG. 9 is a flowchart of a processing procedure for a software acquisition process;
    [0026]
    FIG. 10 is a flowchart of a processing procedure for the software acquisition process; and
    [0027]
    FIG. 11 is a flowchart of a process procedure when the peripheral device is disconnected.
    DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS
    [0028]
    Exemplary embodiments of the mobile terminal apparatus and the software install method according to the present invention are explained below with reference to the accompanying drawings. In the following description, the word “software” refers to software required for using a peripheral device.
    [0029]
    FIG. 1 is a schematic for explaining the software install method according to an embodiment of the present invention. A mobile terminal apparatus 100 includes a plurality of software sources.
    [0030]
    One of the software sources is a storage medium such as a memory card that can be read by the mobile terminal apparatus 100. This storage medium can be provided by the manufacturer of the peripheral device or can be a storage medium available in the market in which the user has downloaded the relevant software over a network, and the like.
    [0031]
    Another software source is a software distribution server 300 to which the mobile terminal apparatus 100 can connect via the Internet using its Internet connectivity function. The software distribution server 300 is run by a mobile phone service provider or the mobile phone manufacturer. The software distribution server 300 holds the latest software required for operating the peripheral device that can be connected to the mobile terminal apparatus 100.
    [0032]
    Yet another software source is an external device 200 to which the mobile terminal apparatus 100 can be connected either wirelessly or via a cable. The external device 200 is an information processing apparatus such as a personal computer and includes a software-acquisition supporting program 292. When activated, the software-acquisition supporting program 292 monitors the storage medium such as a Compact Disk-Read Only Memory (CD-ROM) and the software distribution server 300 connected to the external device 200 via a network such as the Internet, and caches the software required by the mobile terminal apparatus 100 in the external device 200.
    [0033]
    The software sources described above have their merits and demerits. The storage medium such as the memory card can be used to install software without having to connect to the Internet, and hence is inexpensive and requires very little time. However, the disadvantage of the storage medium is that it involves an immense amount of time and effort to store the software required for all the peripheral device that one might use and make sure that all the software are the latest versions.
    [0034]
    Using the software distribution server 300 ensures that the all the software required for the peripheral devices are the latest. However, since the internet connectivity function of the mobile terminal apparatus 100 is comparatively slow, the communication cost incurred for downloading the software is high.
    [0035]
    In the case of the external device 200, software that is downloaded by the personal computer at high speed and low cost can be acquired or loaded from the storage medium such as the CD-ROM. Therefore, the latest available software for all the peripheral devices can be obtained practically at no cost. However, the disadvantage of the external device 200 as a software source is that the mobile terminal apparatus 100 needs to be connected to the external device 200.
    [0036]
    In the software install method according to the present embodiment, the appropriateness of these software sources are constantly monitored, and when a peripheral device is connected to the mobile terminal apparatus 100, an appropriate software source is automatically selected and software installation is automatically performed.
    [0037]
    FIG. 2 is a block diagram of the mobile terminal apparatus 100 according to the present embodiment. The parts of the mobile terminal apparatus 100 that are not relevant to software installation (such as, parts required for a communication function) are not shown in FIG. 2.
    [0038]
    The mobile terminal apparatus 100 includes a network connecting unit 110, a memory-card interface unit 120, a wired-connection interface unit 130, a wireless-connection interface unit 140, an operation panel 150, a control unit 160, and a memory unit 170.
    [0039]
    The network connecting unit 110 is a device for connecting the mobile terminal apparatus 100 to the Internet. The memory-card interface unit 120 is an interface device that is required to read data from and write data to the memory card. The memory-card interface unit 120 also doubles as a peripheral device connection interface. Peripheral devices, such as a Global Positioning System (GPS) can be connected to the memory-card interface unit 120.
    [0040]
    The wired-connection interface unit 130 is a device by which the mobile terminal apparatus 100 can be connected to the external device 200 via a cable, such as Universal Serial Bus (USB). The wireless-connection interface unit 140 is a device by which the mobile terminal apparatus 100 can be connected to the external device 200 wirelessly, such as by Bluetooth technology. The wired-connection interface unit 130 also doubles as the peripheral device connection interface.
    [0041]
    The operation panel 150 includes a display screen for displaying data, and a keyboard, etc. for accepting input from the user. The control unit 160 controls the entire mobile terminal apparatus 100 and includes a software-source monitoring unit 161, a peripheral-device monitoring unit 162, a software-source selecting unit 163, an install executing unit 164, and an uninstall executing unit 165.
    [0042]
    The software-source monitoring unit 161 monitors the software sources to determine their appropriateness, and sets the determination result in a software-source management table 171 in the memory unit 170. Specifically, if the network connecting unit 110 is in a communicable mode, the software-source monitoring unit 161 determines that the network connecting unit 110 can be used as the software source. If a memory card is inserted in the memory-card interface unit 120, the software-source monitoring unit 161 determines that the memory-card interface unit 120 can be used as the software source. If the mobile terminal apparatus 100 is connected to the external device 200 via the wired-connection interface unit 130 or the wireless-connection interface unit 140, the software-source monitoring unit 161 determines that the wired-connection interface unit 130 or the wireless-connection interface unit 140 can be used as the software source.
    [0043]
    FIG. 3 is a schematic of data organization of the software-source management table 171. The software-source management table 171 lists the software sources in their priority and includes the fields Software-source ID, Source name, Priority, and Connection status. Data is entered in all the fields for each software source.
    [0044]
    The field Software-source ID refers to the IDs assigned to the software sources to distinguish them from one another. The field Source name refers to the name of the software source. The field Priority refers to data pertaining to a deciding factor for selecting a software source when a plurality of software sources provides the same version of the software for the same peripheral device. The smaller the value is, the higher the priority is. The field Connection status refers to data pertaining to whether the software source is connected to the mobile terminal apparatus 100, and may have one of two values, namely, “Connected” and “Not connected”.
    [0045]
    The software-source management table 171 shown in FIG. 3 contains data pertaining to four items. However, the number of items in the software-source management table 171 varies depending on the configuration of the mobile terminal apparatus 100. For example, if the wireless-connection interface unit 140 is not provided in the mobile terminal apparatus 100, data corresponding to the wireless-connection interface unit 140 will be absent in the software-source management table 171, and the software-source management table 171 will contain only three items.
    [0046]
    The data in the first row, “IN” in the field Software-source ID and “Internet” in the field Source name, corresponds to the network connecting unit 110. The data in the second row, “WL” in the field Software-source ID and “Local connection (Wireless connection)” in the field Source name, corresponds to the wireless-connection interface unit 140. The data in the third row, “WR” in the field Software-source ID and “Local connection (Wired connection)” in the field Source name, corresponds to the wired-connection interface unit 130. The data in the fourth row, “MC” in the field Software-source ID and “Memory card” in the field Source name, corresponds to the memory-card interface unit 120.
    [0047]
    The Priority field has the value 4 in the first row, 3 in the second row, 2 in the third row, and 1 in the fourth row, indicating that the highest priority is assigned to the memory-card interface unit 120, the next highest priority is assigned to the wired-connection interface unit 130, followed by the wireless-connection interface unit 140, and finally the network connecting unit 110. By setting the priority in this way, the fastest and most inexpensive software source is selected on priority basis when the same version of the software is available with a plurality of software sources.
    [0048]
    The Connection field status has the value “Connected” in the first row, second row and the fourth row, and “Unconnected” in the third row, indicating that the network connecting unit 110, the wireless-connection interface unit 140, and the memory-card interface unit 120 are available as the software sources, whereas the wired-connection interface unit 130 is not available.
    [0049]
    The software-source monitoring unit 161 then acquires data pertaining to the software required by the mobile terminal apparatus 100 from the available software sources and stores the acquired data in a version management table 172 of the memory unit 170. Specifically, if the memory-card interface unit 120 is determined to be available as the software source, the software-source monitoring unit 161 searches for the software that can be installed on the mobile terminal apparatus 100 in the inserted memory card, and writes the result of the search in the version management table 172. The software-source monitoring unit 161 determines whether a software file is the right file for operating the peripheral device or whether the software file is compatible with the mobile terminal apparatus 100 by the extension of the file or by specific data within the file.
    [0050]
    If the wired-connection interface unit 130 or the wireless-connection interface unit 140 is determined to be available as the software source, the software-source monitoring unit 161 queries the software-acquisition supporting program 292 of the connected external device 200 about the software available on the external device 200, and stores the result of the query in the version management table 172.
    [0051]
    If a particular software source is no longer available, the software-source monitoring unit 161 removes the data corresponding to that software source from the version management table 172. Thus, by storing the data pertaining to software available with various software sources in the version management table 172, the software-source monitoring unit 161 is quickly able to determine from which software source to acquire the software, when a peripheral device is connected to the mobile terminal apparatus 100.
    [0052]
    According to the present embodiment, to avoid communication cost, no query pertaining to the software is sent by the software-source monitoring unit 161 to the software distribution server 300 even if the network connecting unit 110 is determined to be available as the software source. If communication cost poses no problem, the software-source monitoring unit 161 can be configured to periodically acquire, via the network connecting unit 110, data pertaining to the available software from the software distribution server 300.
    [0053]
    FIG. 4 is a schematic of data organization of the version management table 172. The version management table 172 is a table for keeping track of the software available with the software sources and their versions. The version management table 172 includes the fields Device information, Software-source ID, File name, and Version. The version management table 172 can contain several sets of Software-source ID through Version corresponding to a single Device information.
    [0054]
    The field Device information refers to data distinguishing the peripheral device compatible with the software and is represented by a combination of the device type, manufacturer's ID, interface name, and a unique device ID. The field Software-source ID refers to the ID of the software source and corresponds to the field Software-source ID of the software-source management table 171. The field File name refers to the file name of the software. The field Version refers to the version of the software.
    [0055]
    The version management table 172 shown in FIG. 4 contains data pertaining to the peripheral device having the device information W-LAN/FUJI/SDIO/Wxxxx. The device information W-LAN/FUJI/SDIO/Wxxxx indicates that peripheral device is a wireless LAN device (W-LAN) manufactured by Fuji, connects to the mobile terminal apparatus 100 by a memory-card interface unit SDIO, and is recognized by the mobile terminal apparatus 100 as a device having an ID Wxxxx.
    [0056]
    There are two sets of data stored against the device information W-LAN/FUJI/SDIO/Wxxxx, indicating that two software sources are available for this peripheral device. From FIG. 4, it can be discerned that one of the software sources is MC, that is, the memory-card interface unit 120, and that Version 1.5 of the file xxx.drv can be acquired from the memory card connected to the memory-card interface unit 120, and that the other software source is WL, that is, the wireless-connection interface unit 140, and that Version 1.7 of the file xxx.drv can be acquired from the external device 200 wirelessly connected to the mobile terminal apparatus 100.
    [0057]
    FIG. 4 also shows data pertaining to the peripheral device having the device information GPS/DOMO/SDIO/Gxxxx. The device information GPS/DOMO/SDIO/Gxxxx indicates that peripheral device is a GPS device manufactured by Domo, connects to the mobile terminal apparatus 100 by a memory-card interface unit SDIO, and is recognized by the mobile terminal apparatus 100 as a device having an ID Dxxxx.
    [0058]
    There is only set of data stored against the device information GPS/DOMO/SDIO/Gxxxx, indicating that only one software source is available for this peripheral device. The software source is WL, that is the wireless-connection interface unit 140, and Version 2.2 of the file yyy.drv can be acquired from the external device 200 wirelessly connected to the mobile terminal apparatus 100.
    [0059]
    The software distribution server 300 contains software pertaining to a large number of peripheral devices. Therefore, when retrieving data pertaining to software for the peripheral devices that can be connected to the mobile terminal apparatus 100 from the software distribution server 300 via the external device 200, it may happen that more data is acquired than can be stored in the version management table 172. To prevent this from happening, data pertaining to only the software relevant to the peripheral device actually connected to the mobile terminal apparatus 100 may be obtained from the software distribution server 300. Data pertaining to the peripheral devices actually connected to the mobile terminal apparatus 100 can be acquired from a peripheral-device management table 173 stored in the memory unit 170.
    [0060]
    The peripheral-device monitoring unit 162 monitors the connection status of the peripheral devices and registers the result in the peripheral-device management table 173 stored in the memory unit 170. Specifically, the peripheral-device monitoring unit 162 monitors the memory-card interface unit 120 and the wired-connection interface unit 130, and when a peripheral device is detected, registers the observation in the peripheral-device management table 173. Similarly, if a peripheral device is disconnected from the memory-card interface unit 120 and the wired-connection interface unit 130, the peripheral-device monitoring unit 162 registers the observation in the peripheral-device management table 173.
    [0061]
    When a peripheral device is detected, the peripheral-device monitoring unit 162 notifies the install executing unit 164, and if necessary, prompts the install executing unit 164 to install the software. Similarly, when a peripheral device is disconnected, the peripheral-device monitoring unit 162 notifies the uninstall executing unit 165, and if necessary, prompts the uninstall executing unit 165 to uninstall the software.
    [0062]
    FIG. 5 is a schematic of data organization of the peripheral-device management table 173. The peripheral-device management table 173 is used for managing the various peripheral devices, the status of the software for operating the peripheral device and the usage status of the software. The peripheral-device management table 173 contains the fields Device type, Manufacturer, Interface type, ID, Connection status, Version, Install status, Network connection, Action when connected, and Action when disconnecting.
    [0063]
    The field “Device type” refers to data indicating the type of the peripheral device, the field Manufacturer refers to data identifying the manufacturer, the field Interface type refers to the interface name, and the field ID refers to the unique ID of the peripheral device. The field Connection status refers to data pertaining to whether the peripheral device is connected to the mobile terminal apparatus 100, and may have one of two values, namely, “Connected” and “Not connected”.
    [0064]
    The field “Version” refers to the version of the installed software. If no software is installed on the peripheral device, the Version field remains blank. The field Install status refers to data pertaining to whether the software for the peripheral device is installed and may have one of two values, namely, “Installed” and “Not installed”.
    [0065]
    The field “Network connection” refers to data pertaining to whether software is to be acquired by using the Internet connectivity function of the mobile terminal apparatus 100, and may have any one of the values No, Yes, and Ask. The default value for the field Network connection is Ask, which indicates that when software is required to be acquired by connecting to the Internet, the user is to be asked first whether to connect to the Internet. The user can change the setting of Network connection to No or Yes, as the situation demands. Thus, by providing an option for whether to connect to the Internet to acquire the software required for the peripheral device, the communication cost can be curtailed.
    [0066]
    The field “Action when connected” refers to the action to be taken when the peripheral device is connected to the mobile terminal apparatus 100, and may have one of two values, namely, Keep Current and Update. The value Keep current indicates that the existing installed software be used as it is. The value Update indicates that even if the software is already installed, if a later version is available with any of the software sources, the later version be installed.
    [0067]
    The field “Action when disconnecting” refers to the action to be taken when disconnecting the peripheral device from the mobile terminal apparatus 100, and may have any one of the values, namely, Keep software, Remove software, and Depending on available space. The value Keep software indicates that the software be kept installed. The value Remove software indicates that the software be uninstalled. The value Keep/Remove according to space availability indicates that the software be kept installed if the free space in a software storing unit 174 of the memory unit 170 is equal to or greater than a threshold value, and be uninstalled if the free space is less than the threshold value. The settings in the fields Action when connected and Action when disconnecting can be changed according to user requirement.
    [0068]
    When a peripheral device is detected, the peripheral-device monitoring unit 162 checks whether data pertaining to the peripheral device is present in the peripheral-device management table 173, and if the data is not found, registers the data in the peripheral-device management table 173. If the data is found, the peripheral-device monitoring unit 162 updates the Connection status field to Connected. When the peripheral device is no longer detected due to being disconnected, the peripheral-device monitoring unit updates the Connection status field to “Not connected”. Data deletion from the peripheral-device management table 173 takes place only upon instruction by the user.
    [0069]
    The software-source selecting unit 163 determines which software source is to be used for retrieving software for the peripheral device that is connected to the mobile terminal apparatus 100. Specifically, if the software is already installed and the Action when connected field of the peripheral-device management table 173 has the value Keep current, the software-source selecting unit 163 determines that software installation is not required.
    [0070]
    If no software is installed or if the Action when connected field does not have the value Keep current, the software-source selecting unit 163 looks up the software-source management table 171 and selects the software source providing the latest version of the software from among the software sources providing the software for the connected peripheral device. If the same version of the software is available with a plurality of software sources, the software-source selecting unit 163 selects the software source having the highest priority from the software-source management table 171.
    [0071]
    However, if the version of the software of the selected software source is found to be older than the version already installed on the mobile terminal apparatus 100, the software-source selecting unit 163 determines that software installation is not required.
    [0072]
    The install executing unit 164 installs software. Upon receiving a notification from the peripheral-device monitoring unit 162 that a peripheral device has been connected, the install executing unit 164 prompts the software-source selecting unit 163 to select a software source, obtains the software from the selected software source, and installs the software. If the software-source selecting unit 163 determines that software installation is not required, the install executing unit 164 does not perform the installation process.
    [0073]
    If no software source is available for the software-source selecting unit 163 to select, the install executing unit 164 acquires the software from the software distribution server 300 via the network and installs the acquired software. If the mobile terminal apparatus 100 is connected to the external device 200 and no software source is available for the software-source selecting unit 163 to select, the install executing unit 164 acquires the software via the external device 200 without making use of the internet connectivity function of the mobile terminal apparatus 100, thus keeping down the communication cost.
    [0074]
    Once the software is installed, the install executing unit 164 sets the value Installed in the Install status field, and the version of the installed software in the Version field of the peripheral-device management table 173.
    [0075]
    The uninstall executing unit 165 uninstalls software. Upon receiving a notification from the peripheral-device monitoring unit 162 that the peripheral device has been disconnected, the uninstall executing unit 165 looks up the Action when disconnecting field of the peripheral-device management table 173, and if the value is either Remove software or Keep/Remove according to space availability and the free space in the software storing unit 174 is less than the threshold value, uninstalls the software.
    [0076]
    Once the software is uninstalled, the uninstall executing unit 165 sets the value Not installed in the Install status field, and a blank in the Version field of the peripheral-device management table 173.
    [0077]
    The memory unit 170 is a storage unit that stores various types of data, and includes the software-source management table 171, the version management table 172, the peripheral-device management table 173, and the software storing unit 174. The software-source management table 171, the version management table 172, the peripheral-device management table 173 have been described in detail. The software storing unit 174 is an area where the software installed by the install executing unit 164 are stored.
    [0078]
    The external device 200 is described next. FIG. 6 is a block diagram of the external device 200. The external device 200 includes an input unit 210, a monitor 220, a wireless-connection interface unit 230, a wired-connection interface unit 240, a network interface device 250, a medium reading unit 260, a central processing unit (CPU) 270, a random access memory (RAM) 280, and a hard disk drive (HDD) 290.
    [0079]
    The input unit 210 accepts input from the user and includes a keyboard and a mouse. The monitor 220 displays various types of data and is a liquid crystal display device.
    [0080]
    The wireless-connection interface unit 230 connects the external device 200 to other information processing devices wirelessly, such as by Bluetooth technology. The wired-connection interface unit 240 connects the external device 200 to other information processing devices via a cable, such as the USB. The network interface device 250 connects the external device 200 to the Internet. The medium reading unit 260 reads data from a recording medium, such as a CD-ROM, and the like.
    [0081]
    The CPU 270 controls the implementation of the various processes by executing a program. For instance, to implement a software-acquisition supporting process for a software required for the mobile terminal apparatus 100, the CPU 270 reads the software-acquisition supporting program 292 stored in the HDD 290, launching it as a software-acquisition supporting process 281 in the RAM 280, making the software-acquisition supporting process 281 executable.
    [0082]
    The RAM 280 is a working memory and is used by the CPU 270 for launching a program, data, etc., whenever the need arises. The HDD 290 is a storage device for storing various types of data, and stores device information 291 and the software-acquisition supporting program 292. The HDD 290 includes a software storing unit 293.
    [0083]
    The device information 291 pertains to information necessary for selecting the software required for the mobile terminal apparatus 100. The software-acquisition supporting program 292 acquires the software required for establishing a connection between the external device 200 and the mobile terminal apparatus 100 from either a recording medium such as CD-ROM or from the software distribution server 300, and caches the acquired software in the software storing unit 293.
    [0084]
    Upon being read by the CPU 270 when the external device 200 is started up, the software-acquisition supporting program 292 is launched as the software-acquisition supporting process 281. The software-acquisition supporting process 281 process involves searching for and caching the software when other processes are idle, and providing the information pertaining to the cached software or sending the software itself to the mobile terminal apparatus 100 that is connected to the external device 200 wirelessly or via a cable, according to the requirement of the mobile terminal apparatus 100.
    [0085]
    FIG. 7 is a flowchart of the functioning of the software-source monitoring unit 161.
    [0086]
    The software-source monitoring unit 161 monitors the software sources (step S101) and if connection of any of the software sources is detected (“Yes” at step S102), gets information pertaining to software available with the software source (step S103), and updates the version management table 172 based on the information obtained (step S104). The software-source monitoring unit 161 then updates the Connection status field of the software-source management table 171, indicating that the concerned software source is connected and available (step S105).
    [0087]
    If disconnection of the software source is detected (“Yes” at step S106), the software-source monitoring unit 161 updates the Connection status field of the software-source management table 171, indicating that the software source is disconnected (step S107), and deletes data pertaining to the software source from the version management table 172 (step S108).
    [0088]
    FIG. 8 is a flowchart of the processing procedure when the peripheral device is connected. When a peripheral device is connected to the mobile terminal apparatus 100, the peripheral-device monitoring unit 162 acquires data pertaining to the connected peripheral device (step S201). The peripheral-device monitoring unit 162 checks whether the acquired-data pertaining to the peripheral device is already entered in the peripheral-device management table 173 (Step S202), and if no entry is found (“No” at step S202), enters the data (step S203). If the data already exists (“Yes” at step S202), the peripheral-device monitoring unit 162 updates the Connection status field of the peripheral-device management table 173, indicating that the concerned peripheral device is connected (step S204).
    [0089]
    The software-source selecting unit 163 acquires the data pertaining to the peripheral device from the peripheral-device management table 173. If the Action when connected field has the value “Keep current” (step S205) and the Install status field has the value “Installed” (step S206), the software-source selecting unit 163 determines that software installation is not required and terminates the process. If either the Action when connected field does not have the value Update or the Install status field has the value Not installed (“No” at either step S205 or step S206), the software-source selecting unit 163 carries out a software acquisition process described later (step S207).
    [0090]
    FIGS. 9 10 are flowcharts of processing procedures for the software acquisition process. The software-source selecting unit 163 retrieves all the data corresponding to the peripheral device connected to the mobile terminal apparatus 100 (step S301) as potential software-source candidates.
    [0091]
    From the potential software-source candidates, the software-source selecting unit 163 then selects the software source having the highest value in the Version field (step S302). If a plurality of software sources provides the same version of the software (“Yes” at step S303), the software-source selecting unit 163 selects the software source having the highest priority from the software-source management table 171 (step S304).
    [0092]
    Once the software source is selected thus (“No” at step S305), the software-source selecting unit 163 compares the version of the software available with the selected software source with that of the software already installed on the mobile terminal apparatus 100. If the version of the software available with the selected software source is lower than the version of the existing software (“Yes” at step S306), the process is terminated without installing the software.
    [0093]
    If the version of the software available with the selected software source is higher than the existing software, or if no software is installed on the mobile terminal apparatus 100 to begin with (“No” at step S306), the install executing unit 164 acquires and installs the software from the software source (step S307) and modifies the Install status field of the peripheral-device management table 173, indicating that the software is installed (step S308).
    [0094]
    If no software source is available, that is, connected (“Yes” at step S305), the install executing unit 164 tries to acquire the software from the software distribution server 300. The peripheral-device monitoring unit 162 retrieves the data pertaining to the connected peripheral device from the peripheral-device management table 173 and checks the value set in the Network connection field. If the value in the Network connection field is Ask (“Ask” at step S401), the install executing unit 164 asks for user permission to connect to the network to acquire the software (step S402).
    [0095]
    If the value in the Network connection field is Yes (“Yes” at step S401) or if the user grants permission to access the Internet (“Yes” at step S403), the install executing unit 164 acquires data pertaining to the software required for the peripheral device from the software distribution server 300 (step S404).
    [0096]
    If a software is already installed on the mobile terminal apparatus 100 and the version of the software available with the software distribution server 300 is lower than that of the software installed on the mobile terminal apparatus 100 (“Yes” at step S405), the process is terminated without installing the software.
    [0097]
    If no software is installed on the mobile terminal apparatus 100 or if the version of the software available with the software distribution server 300 is higher than that of the software installed on the mobile terminal apparatus 100 (“No” step S405), the install executing unit 164 acquires and installs the software from the software distribution server 300 (step S406), and updates the Install status field of the peripheral-device management table 173, indicating that the software is installed (step S407).
    [0098]
    If the value of the Network connection field is No (“No” at step S401) or if no permission is granted by the user to connect to the Internet (“No” at step S403), the process is terminated without installing the software. If the software is not already installed on the mobile terminal apparatus 100 (“No” at step S408), the install executing unit 164 notifies the user that the software could not be acquired (step S409).
    [0099]
    FIG. 11 is a flowchart of the processing procedure when the peripheral device is disconnected. When the peripheral device is disconnected from the mobile terminal apparatus 100, the peripheral-device monitoring unit 162 retrieves the data pertaining to the disconnected peripheral device (step S501), and updates the Connection status field of the peripheral-device management table 173, indicating that the peripheral device is disconnected (step S502).
    [0100]
    The uninstall executing unit 165 then retrieves data the data pertaining to the disconnected peripheral device from the peripheral-device management table 173 and checks the value of the Action when disconnecting field (step S503). If the value is Keep/Remove according to space availability (“Keep/Remove according to space availability” at step S503), the uninstall executing unit 165 checks the free space available in the software storing unit 174 (step S504).
    [0101]
    If the value of the Action when disconnecting field is Keep (“Keep” at step S503), or if the free space in the software storing unit 174 is equal to or greater than the threshold value (“Yes” at step S505), the process is terminated without uninstalling the software. If the value of the Action when disconnecting field is Remove (“Remove” at step S503), or if the free space in the software storing unit 174 is less than the threshold value (“No” at step S505), the uninstall executing unit 165 uninstalls the software (step S506) and updates the Install status field of the peripheral-device management table 173, indicating that the software is uninstalled (step S507).
    [0102]
    As described above, according to the present embodiment, all the available software sources are monitored and information pertaining to the software, such as version, etc., available with each of the software sources is acquired. When a peripheral device is connected to the mobile terminal apparatus, an appropriate software source is selected based on the version data and the priority set for the software sources. Consequently, the latest software for using the peripheral device is quickly and automatically acquired from the most appropriate software source.
    [0103]
    According to the present invention, when a peripheral device is connected to a mobile terminal apparatus, the software required for using the peripheral device can be automatically and quickly acquired from the most appropriate software source and installed.
    [0104]
    Furthermore, according to the present invention, a memory unit of the mobile terminal apparatus having storage space constraints can be efficiently used.
    [0105]
    Moreover, according to the present invention, the latest version of the software is automatically acquired and installed.
    [0106]
    Furthermore, according to the present invention, the software is automatically acquired from the software source based on the priority.
    [0107]
    Although the invention has been described with respect to a specific embodiment for a complete and clear disclosure, the appended claims are not to be thus limited but are to be construed as embodying all modifications and alternative constructions that may occur to one skilled in the art that fairly fall within the basic teaching herein set forth.

Claims (17)
1. A mobile terminal apparatus connectable to a peripheral device, the mobile terminal apparatus comprising:
a software-source monitoring unit that monitors a software source that provides software required for using the peripheral device, and stores data pertaining to acquirable software and the software source in a corresponding manner in a memory unit;
a peripheral-device monitoring unit that monitors connection status of the peripheral device;
a software-source selecting unit that selects the software source based on the data stored in the memory unit when the peripheral-device monitoring unit detects connection of the peripheral device; and
an install executing unit that acquires the software from the software source selected by the software-source selecting unit.
2. The mobile terminal apparatus according to claim 1, further comprising:
an uninstall executing unit that uninstalls the software when the peripheral-device monitoring unit detects disconnection of the peripheral device.
3. The mobile terminal apparatus according to claim 2, wherein
the memory unit includes a peripheral-device management table in which an action when disconnecting is set, and
when the action when disconnecting is set to keep a current software, the uninstall executing unit does not uninstall the software even if the peripheral-device monitoring unit detects disconnection of the peripheral device.
4. The mobile terminal apparatus according to claim 2, wherein
the memory unit includes a software storing unit that stores the software, and
when an available space in the software storing area is greater than a predetermined value, the uninstall executing unit does not uninstall the software even if the peripheral-device monitoring unit detects disconnection of the peripheral device.
5. The mobile terminal apparatus according to claim 1, wherein
the software-source monitoring unit stores data including version information of the software in the memory unit, and
the software-source selecting unit selects the software source that provides a latest version of the software when a plurality of software-sources provides the software at the same time.
6. The mobile terminal apparatus according to claim 5, wherein
the software-source selecting unit selects the software source based on a preset priority when a plurality of software sources provides the latest version of the software at the same time.
7. The mobile terminal apparatus according to claim 5, wherein
the software-source selecting unit suspends software installation if the software is already installed and the version of the installed software is equal to or higher than a version of the software available from any of the software sources.
8. The mobile terminal apparatus according to claim 1, wherein
the install executing unit acquires the software using a communication function of the mobile terminal apparatus if information pertaining to the software does not exist in the memory unit.
9. The mobile terminal apparatus according to claim 8, wherein
the install executing unit confirms a user permission before acquiring the software using the communication function of the mobile terminal apparatus.
10. The mobile terminal apparatus according to claim 1, wherein
the install executing unit acquires the software using a communication function of an information processing apparatus connected to the mobile terminal apparatus by a cable if information pertaining to the software does not exist in the memory unit.
11. The mobile terminal apparatus according to claim 10, further comprising:
a wireless-connection interface unit that wirelessly connects the information processing apparatus to the mobile terminal apparatus.
12. The mobile terminal apparatus according to claim 1, further comprising:
a memory-card interface unit for connecting a memory card to the mobile terminal apparatus, wherein
the software-source monitoring unit monitors the memory-card interface unit as the software source, and acquires the information pertaining to the software by searching the memory card connected via the memory-card interface unit.
13. The mobile terminal apparatus according to claim 10, further comprising:
a wired-connection interface unit that connects the information processing apparatus to the mobile terminal apparatus, wherein
the software-source monitoring unit monitors the wired-connection interface unit provided in the mobile terminal apparatus as the software source, and acquires the information pertaining to the software from the information processing apparatus connected via the wired-connection interface unit.
14. The mobile terminal apparatus according to claim 11, wherein
the software-source monitoring unit monitors the wireless-connection interface unit as the software source, and acquires the information pertaining to the software from the information processing apparatus connected via the wireless-connection interface unit.
15. A method of installing software in a mobile terminal apparatus connectable to a peripheral device, the method comprising:
software-source monitoring including
monitoring a software source that provides software required for using the peripheral device; and
storing data pertaining to acquirable software and the software source in a corresponding manner in a memory unit;
monitoring connection status of the peripheral device;
selecting the software source based on the data stored in the memory unit when connection of the peripheral device is detected; and
acquiring the software from the software source selected at the selecting.
16. A computer-readable recording medium that stores a computer program for supporting an acquisition of software required for using a peripheral device connected to a mobile terminal apparatus, wherein
the computer program causes a computer to execute:
collecting data pertaining to software compatible with the mobile terminal apparatus based on model data of the mobile terminal apparatus registered in advance;
acquiring the software based on the collected data;
storing the acquire software in a memory unit; and
sending the collected data and the stored software to the mobile terminal apparatus in response to a request from the mobile terminal apparatus.
17. The computer-readable recording medium according to claim 16, wherein
the computer program further causes the computer to execute:
performing acquisition of the software via a network in response to a request from the mobile terminal device.
Patent Citations (4)
Publication number Priority date Publication date Assignee Title
US20040267881A1 * 2000-09-26 2004-12-30 Microsoft Corporation Automatic server-side plug-and-play without user intervention
US20030023770A1 * 2001-07-26 2003-01-30 Barmettler James W. Automated software driver installation
US20050246703A1 * 2002-06-18 2005-11-03 Petri Ahonen Method and apparatus for programming updates from a network unit to a mobile device
US20070101118A1 * 2005-11-01 2007-05-03 Internatoinal Business Machines Corporation Method and system for local provisioning of device drivers for portable storage devices
* Cited by examiner, † Cited by third party
Cited By (42)
Search Within Citing Patents
Publication number Priority date Publication date Assignee Title
US20090123135A1 * 2001-11-09 2009-05-14 Amling Marc R Image capture module
US20040028390A9 * 2001-11-09 2004-02-12 David Chatenever Replaceable hardware component of a camera control unit for video systems
US8199188B2 2001-11-09 2012-06-12 Karl Storz Imaging, Inc. Video imaging system with a camera control unit
US20070024717A1 * 2001-11-09 2007-02-01 Karl Storz Imaging, Inc. Programmable camera control unit with updatable program
US20030123856A1 * 2001-11-09 2003-07-03 David Chatenever Replaceable hardware component of a camera control unit for video systems
US8274559B2 2001-11-09 2012-09-25 Karl Storz Imaging, Inc. Replaceable hardware component of a camera control unit for video systems
US8089509B2 * 2001-11-09 2012-01-03 Karl Storz Imaging, Inc. Programmable camera control unit with updatable program
US9007450B2 2001-11-09 2015-04-14 Karl Storz Imaging, Inc. Video imaging system with detachable storage device
US20060159160A1 * 2005-01-14 2006-07-20 Qualcomm Incorporated Optimal weights for MMSE space-time equalizer of multicode CDMA system
US8780957B2 2005-01-14 2014-07-15 Qualcomm Incorporated Optimal weights for MMSE space-time equalizer of multicode CDMA system
US9197912B2 2005-03-10 2015-11-24 Qualcomm Incorporated Content classification for multimedia processing
US20060222078A1 * 2005-03-10 2006-10-05 Raveendran Vijayalakshmi R Content classification for multimedia processing
US9088776B2 2005-09-27 2015-07-21 Qualcomm Incorporated Scalability techniques based on content information
US9071822B2 2005-09-27 2015-06-30 Qualcomm Incorporated Methods and device for data alignment with time domain boundary
US8879857B2 2005-09-27 2014-11-04 Qualcomm Incorporated Redundant data encoding methods and device
US8879856B2 2005-09-27 2014-11-04 Qualcomm Incorporated Content driven transcoder that orchestrates multimedia transcoding using content information
US9113147B2 2005-09-27 2015-08-18 Qualcomm Incorporated Scalability techniques based on content information
US20070074266A1 * 2005-09-27 2007-03-29 Raveendran Vijayalakshmi R Methods and device for data alignment with time domain boundary
US20070081586A1 * 2005-09-27 2007-04-12 Raveendran Vijayalakshmi R Scalability techniques based on content information
US20100020886A1 * 2005-09-27 2010-01-28 Qualcomm Incorporated Scalability techniques based on content information
US20070081588A1 * 2005-09-27 2007-04-12 Raveendran Vijayalakshmi R Redundant data encoding methods and device
US8879635B2 2005-09-27 2014-11-04 Qualcomm Incorporated Methods and device for data alignment with time domain boundary
US20070171972A1 * 2005-10-17 2007-07-26 Qualcomm Incorporated Adaptive gop structure in video streaming
US8654848B2 2005-10-17 2014-02-18 Qualcomm Incorporated Method and apparatus for shot detection in video streaming
US8948260B2 2005-10-17 2015-02-03 Qualcomm Incorporated Adaptive GOP structure in video streaming
US20070171280A1 * 2005-10-24 2007-07-26 Qualcomm Incorporated Inverse telecine algorithm based on state machine
US20070202863A1 * 2006-02-24 2007-08-30 Winchell Diane M System and method for establishing communication between wireless devices
US8107938B2 * 2006-02-24 2012-01-31 Qualcomm Incorporated System and method for establishing communication between wireless devices
US20080151101A1 * 2006-04-04 2008-06-26 Qualcomm Incorporated Preprocessor method and apparatus
US9131164B2 2006-04-04 2015-09-08 Qualcomm Incorporated Preprocessor method and apparatus
GB2454984A * 2007-11-26 2009-05-27 Lenovo Providing software patches to a computer system using a wireless communications device
US20090138868A1 * 2007-11-26 2009-05-28 Vanover Michael T Techniques for Providing Software Patches to a Computer System
GB2454984B * 2007-11-26 2011-06-22 Lenovo Techniques for providing software patches to a computer system
US8726260B2 2007-11-26 2014-05-13 Lenovo (Singapore) Pte Ltd Techniques for providing software patches to a computer system
US8965843B2 * 2008-01-23 2015-02-24 Hewlett-Packard Development Company, L.P. Prioritized replication paths
US20090187611A1 * 2008-01-23 2009-07-23 Hewlett-Packard Development Company, L.P. Prioritized replication paths
US20100042987A1 * 2008-08-12 2010-02-18 Brother Kogyo Kabushiki Kaisha Install system that installs driver best suited for configuration of data processing device
US9256759B1 * 2009-08-17 2016-02-09 Google Inc. Computer application pre-permissioning
US8332936B1 * 2009-08-17 2012-12-11 Google Inc. Computer application pre-permissioning
US8255991B1 * 2009-08-17 2012-08-28 Google Inc. Computer application pre-permissioning
US9338313B2 * 2011-02-18 2016-05-10 Ricoh Company, Limited Document management apparatus and document management system
JP2014191686A * 2013-03-28 2014-10-06 Kddi R & D Laboratories Inc Application distribution system, application distribution method and program
* Cited by examiner, † Cited by third party
Also Published As
Publication number Publication date Type
US7761883B2 2010-07-20 Grant
JP4984503B2 2012-07-25 Grant
JP2007148816A 2007-06-14 Application
Similar Documents
Publication Publication Date Title
US6192375B1 2001-02-20 Method and apparatus for managing files in a storage medium
US20120124061A1 2012-05-17 Rich Search Over and Deep Integration with Applications
US20070198946A1 2007-08-23 Auxiliary display sidebar integration
US20020138567A1 2002-09-26 Update system, update client apparatus, update server apparatus, and programs
US20120209923A1 2012-08-16 Systems and methods for regulating access to resources at application run time
US20050240918A1 2005-10-27 Method for executing software applications using a portable memory device
US20080141018A1 2008-06-12 Game apparatus and information processing apparatus
US20050108369A1 2005-05-19 Simple and dynamic configuration of network devices
US20090024757A1 2009-01-22 Automatic Protocol Determination For Portable Devices Supporting Multiple Protocols
US20110125601A1 2011-05-26 Invocation of accessory-specific user experience
US20050066325A1 2005-03-24 Software install program product, installation method, and software install system
US7065769B1 2006-06-20 Method for automatically installing and updating drivers
US20020199180A1 2002-12-26 Verification of software application attributes for optimal compatibility with a software system
US20100107150A1 2010-04-29 Terminal having application update managing function, and application update managing program and system
US7032053B2 2006-04-18 System and method for loading, executing, and adapting a portable running operation system from a removable module to multiple computer systems
US20020124181A1 2002-09-05 Method for providing vaccine software and program
US7080245B2 2006-07-18 Method and system of switching between two or more images of firmware on a host device
US20030217357A1 2003-11-20 Monitoring firmware
US6516346B1 2003-02-04 Microcode upgrade in data processing system
US20070169114A1 2007-07-19 Application suite installer with automatic detection of content and configurable options
US20030162575A1 2003-08-28 Mobile communication terminal, information processing apparatus, relay server apparatus, information processing system, and information processing method
US20050138231A1 2005-06-23 Information processing device, information processing system, transmission rate setting method, transmission rate setting computer program, and storage medium containing computer program
US20030225933A1 2003-12-04 Data processing apparatus having function of installing device drivers
US20100130254A1 2010-05-27 Portable communication terminal and program executed by portable communication terminal
US20040103172A1 2004-05-27 Method of updating an operation system
Legal Events
Date Code Title Description
2006-02-24 AS Assignment

Owner name: FUJITSU LIMITED, JAPAN

Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KASAMA, KOICHIRO;REEL/FRAME:017593/0705

Effective date: 20060201
2013-12-27 FPAY Fee payment

Year of fee payment: 4
Data provided by IFI CLAIMS Patent Services
About Send Feedback Terms Privacy Policy
memorycard

